library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
--****************************************************************************
--*
--* Name: MovingLed
--* Designer: Michaela Crego
--*
--* The lab focuses on learning about sequential design by controlling an
--*LED's position on a 16-LED bar.
--* Users can move the lit LED left or right using joystick buttons, with
--* movement stopping at the bar's edges.
--* The system uses a seven-segment display to show the LED's position in
--*decimal and hexadecimal,
--* with specific displays designated for each format.
--*
--****************************************************************************
entity MovingLed is
	port(
	--CLOCK INPUTS
    	reset: in std_logic;
    	clock: in std_logic;
	--INPUTS
    	leftButton: in std_logic;
    	rightButton: in std_logic
 	--OUTPUTS
    	segDis: out std_logic_vector(6 downto 0);
    	anodeSel:  out std_logic_vector(3 downto 0);
    	leds: out std_logic_vector(15 downto 0);
	);
end MovingLed;
 
architecture MovingLed_ARCH of MovingLed is
	--general-definitions------------------------------------------------CONSTANTS
	constant ACTIVE: std_logic := '1'; --ACTIVE =1
	--general-definitions--------------------------------------------------SIGNALS
	signal ledPosition: std_logic_vector(3 downto 0) := "0000";  
	--decSegVec will take upper for tenths and lower for ones place
	signal decSegVec: std_logic_vector(7 downto 0) := "00000000";
 
--==================================================--
--TIPPEN’S 7-SEG COMPONENT SevenSegmentDriver.vhd
--==================================================--
component SevenSegmentDriver
    	port (
        	reset: in std_logic;
        	clock: in std_logic;
    	
        	digit3: in std_logic_vector(3 downto 0);  --leftmost digit
        	digit2: in std_logic_vector(3 downto 0);  --2nd from left digit
        	digit1: in std_logic_vector(3 downto 0);  --3rd from left digit
        	digit0: in std_logic_vector(3 downto 0);  --rightmost digit
    	
        	blank3: in std_logic;	--leftmost digit
        	blank2: in std_logic;	--2nd from left digit
        	blank1: in std_logic;	--3rd from left digit
        	blank0: in std_logic;	--rightmost digit
    	
        	sevenSegs: out std_logic_vector(6 downto 0);--MSB=a, LSB=g
        	anodes:	out std_logic_vector(3 downto 0)--MSB=leftmost digit
    	);
	end component;
begin
	MY_SEGMENTS: SevenSegmentDriver port map (
--WILL ASSIGN IN PORT MAP W/ CORRECT SIGNALS/PORTS
    	reset  => reset,
    	clock  => clock,
    	digit3 => ledPosition,
    	digit2 => (others => '0'),
    	digit1 => decSegVec(7 downto 4),--10ths place(left digit)
    	digit0 => decSegVec(3 downto 0),--ones place (right digit)
    	blank3 => '0',
    	blank2 => '1',--NOT USING THIS
    	blank1 => '0',
    	blank0 => '0',
    	sevenSegs => segDis,
	    anodes	=> anodeSel
	);
--==================================================--
-- SEQUENTIAL PROCESS: LED_MOVER
--  The purpose of this process is to obtain and control the LED
--  position by utilizing leftButton and rightButton joystick controls.
--  The position will be on the 16 LED array.
--  Therefore, it will increment/decrement
--==================================================--
LED_MOVER: process(clock, reset)
--internal signals var
	variable prev_leftButton: std_logic := '0'; --previous state left
	variable prev_rightButton: std_logic := '0'; --previous state right
begin
	if reset = ACTIVE then
    	ledPosition <= "0000"; --start at 0
	elsif (rising_edge(clock)) then
    	--if you press button, and the last state was not pressed
--and if the led position isn't at the end
    	if((leftButton = ACTIVE)and(prev_leftButton = '0')) and (ledPosition /= "1111") then
		-- Increment ( go left ) with conversion
        	ledPosition <= std_logic_vector(unsigned(ledPosition) + 1);
    	end if;
    	if((rightButton = ACTIVE)and(prev_rightButton = '0'))and(ledPosition /= "0000") then
		-- decrement ( go right ) with conversion
        	ledPosition <= std_logic_vector(unsigned(ledPosition) - 1);
    	end if;
    	--updating the internal variable
    	prev_leftButton := leftButton;
    	prev_rightButton := rightButton;
	end if;
end process LED_MOVER;
 
--==================================================--
-- COMBINATIONAL PROCESS: LED_CALC
-- Case statement based on ledPosition (internal sig)
-- update ASAP since in new combinational
-- will decode position and allow display on LED strip
--==================================================--
LED_CALC: process(ledPosition)
begin
	case ledPosition is
    	when "0000" =>
        	leds <= "0000000000000001"; --LED 0
    	when "0001" =>
        	leds <= "0000000000000010"; --LED 1
    	when "0010" =>
        	leds <= "0000000000000100"; -- LED 2
    	when "0011" =>
        	leds <= "0000000000001000"; -- LED 3
    	when "0100" =>
        	leds <= "0000000000010000"; -- LED 4
    	when "0101" =>
        	leds <= "0000000000100000"; -- LED 5
    	when "0110" =>
        	leds <= "0000000001000000"; -- LED 6
    	when "0111" =>
        	leds <= "0000000010000000"; -- LED 7
    	when "1000" =>
        	leds <= "0000000100000000"; -- LED 8
    	when "1001" =>
        	leds <= "0000001000000000"; -- LED 9
    	when "1010" =>
        	leds <= "0000010000000000"; -- LED 10
    	when "1011" =>
        	leds <= "0000100000000000"; -- LED 11
    	when "1100" =>
        	leds <= "0001000000000000"; -- LED 12
    	when "1101" =>
        	leds <= "0010000000000000"; -- LED 13
    	when "1110" =>
        	leds <= "0100000000000000"; -- LED 14
    	when "1111" =>
        	leds <= "1000000000000000"; -- LED 15
   	 when others =>
        	leds <= (others => '0'); --others
	end case;
end process LED_CALC;
 
 --==================================================--
-- COMBINATIONAL PROCESS: DEC_SEG
-- internal variable to keep track and eventually concat
-- with tens and ones
-- will decode to appropriately spit right number out
-- allows to eventually “splice” the two upper and lower bits
-- to then send to 7-seg as shown in diagram
--==================================================--
DEC_SEG: process(ledPosition)
	variable tens: std_logic_vector(3 downto 0) := "0000";
	variable ones: std_logic_vector(3 downto 0) := "0000";
 
begin
	case ledPosition is
    	when "0000" => tens := "0000"; ones := "0000"; --0
    	when "0001" => tens := "0000"; ones := "0001"; --1
    	when "0010" => tens := "0000"; ones := "0010"; --2
    	when "0011" => tens := "0000"; ones := "0011"; --3
    	when "0100" => tens := "0000"; ones := "0100"; --4
    	when "0101" => tens := "0000"; ones := "0101"; --5
    	when "0110" => tens := "0000"; ones := "0110"; --6
    	when "0111" => tens := "0000"; ones := "0111"; --7
   	 when "1000" => tens := "0000"; ones := "1000"; --8
    	when "1001" => tens := "0000"; ones := "1001"; --9
    	when "1010" => tens := "0001"; ones := "0000"; --10
    	when "1011" => tens := "0001"; ones := "0001"; --11
    	when "1100" => tens := "0001"; ones := "0010"; --12
    	when "1101" => tens := "0001"; ones := "0011"; --13
    	when "1110" => tens := "0001"; ones := "0100"; --14
    	when "1111" => tens := "0001"; ones := "0101"; --15
    	when others => tens := "0000"; ones := "0000"; --otherrrs
	end case;
	
	--combine tens and ones into the final 8-bit vector
	decSegVec <= tens & ones; --concatenate
end process DEC_SEG;
 
end MovingLed_ARCH;
